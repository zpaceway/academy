generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id               String            @id @default(auto()) @map("_id") @db.ObjectId
    name             String?
    email            String?           @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    lessonsLiked     LessonLiked[]
    lessonsCompleted LessonCompleted[]
    lessonsSaved     LessonSaved[]
    lessonsRated     LessonRated[]

    @@map("users")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("tokens")
}

model Lesson {
    id          String            @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    video       String
    html        String
    chapterId   String            @db.ObjectId
    chapter     Chapter           @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    likedBy     LessonLiked[]
    completedBy LessonCompleted[]
    savedBy     LessonSaved[]
    ratedBy     LessonRated[]

    @@map("lessons")
}

model LessonLiked {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    lessonId String @db.ObjectId
    userId   String @db.ObjectId
    lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("lessons_liked")
}

model LessonCompleted {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    lessonId String @db.ObjectId
    userId   String @db.ObjectId
    lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("lessons_completed")
}

model LessonSaved {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    lessonId String @db.ObjectId
    userId   String @db.ObjectId
    lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("lessons_saved")
}

model LessonRated {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    lessonId String @db.ObjectId
    userId   String @db.ObjectId
    rate     Int
    lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("lessons_rated")
}

model Chapter {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    name    String
    lessons Lesson[]

    @@map("chapters")
}
